{"version":3,"sources":["components/addportfolio.jsx","components/navbar.jsx","components/stocks.jsx","components/makegraph.jsx","components/addstock.jsx","components/portfolio.jsx","components/portfoliolist.jsx","App.js","serviceWorker.js","index.js"],"names":["AddPortfolioForm","createPortfolio","e","preventDefault","portfolio","_this","refs","portfolioName","value","length","props","addPortfolio","portfolioForm","reset","render","react_default","a","createElement","className","ref","onSubmit","for","type","id","placeholder","disabled","checkPortfolioAmount","this","portfoliosAmount","maxPortfoliosAmount","Component","NavBar","href","addportfolio","onNewPortfolio","Stock","console","log","Object","values","stock","scope","name","twoDecimals","unitValue","onCheckCurrency","quantity","onClick","onDelete","num","Math","floor","MakeGraph","state","labels","datasets","makeDatasets","toConsumableArray","data","i","stocks","k","keys","history","push","newdatasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","setState","makeLabels","newlabels","getDates","dates","undefined","hideIfEmpty","_this2","mdbreact","hidden","es","options","responsive","AddStock","getValue","typing","stockCode","Httpreq","XMLHttpRequest","open","send","json_obj","JSON","parse","responseText","alert","handleSubmit","event","onAddStock","addStockForm","AmountUniqueStocks","maxAmountUniqueStocks","bind","readOnly","checkAmountUniqueStocks","Portfolio","handleStock","stockData","newStock","Date","getTime","currency","totalValue","tot","cur","checkCurrency","handleStockDelete","stockID","filter","c","changeToEuro","rate","checkRate","changeToDollar","stringify","map","components_stocks","key","reactjs_popup_es","trigger","modal","close","addstock","makegraph","PortfolioList","portfolios","onRemovePortfolio","components_portfolio","assertThisInitialized","App","handleNewPortfolio","timestamp","newPortfolio","prevState","concat","handleRemovePortfolio","splice","Fragment","navbar","portfoliolist","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b8bad9d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass AddPortfolioForm extends Component {\r\n    createPortfolio = (e) =>  {\r\n        e.preventDefault();\r\n        //This refs method seems to be outdated but im using it here!\r\n        let portfolio = this.refs.portfolioName.value;\r\n        //checks if the text input is empty\r\n        if(typeof portfolio === 'string' && portfolio.length > 0) {\r\n            this.props.addPortfolio(portfolio);\r\n            //resets after use\r\n            this.refs.portfolioForm.reset();\r\n        }\r\n    };\r\n    //This disables the add button if there's too many portfolios\r\n    checkPortfolioAmount() {\r\n        let value = this.props.portfoliosAmount;\r\n        return value >=this.props.maxPortfoliosAmount ? true : false;\r\n    }\r\n\r\n    render  = () =>  {\r\n        return(\r\n            <form className=\"form-inline\" ref=\"portfolioForm\" onSubmit={this.createPortfolio}>\r\n                <div className=\"form-group\">\r\n                    <label for=\"portfolioItem\">\r\n                        Portfolios Name:\r\n                        <input type=\"text\" id=\"portfolioItem\" placeholder=\"...\" ref=\"portfolioName\" className=\"form-control m-2\" />\r\n                    </label>\r\n                </div>\r\n                <button type=\"submit\" className={\"btn btn-primary\"} disabled={this.checkPortfolioAmount()}>Add Portfolio</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nexport default AddPortfolioForm;\r\n","import React, {Component} from 'react';\r\nimport AddPortfolioForm from \"./addportfolio\";\r\n\r\nclass NavBar extends Component {\r\n    render () {\r\n    return (\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <a className=\"navbar-brand\" href=\"#\">\r\n                <h2>SPMS </h2>\r\n                <h7 className=\"font-italic\" >Stock Portfolio Management System </h7>\r\n            </a>\r\n            <div className=\"navbar navbar-light m-2\">\r\n                <span className={\"badge badge-pill badge-secondary m-2\"} >{this.props.portfoliosAmount} </span>\r\n            <AddPortfolioForm\r\n                /* A popup button where you add portfolios*/\r\n                addPortfolio = {this.props.onNewPortfolio}\r\n                portfoliosAmount = {this.props.portfoliosAmount}\r\n                maxPortfoliosAmount = {this.props.maxPortfoliosAmount}\r\n            />\r\n            </div>\r\n        </nav>\r\n    );\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, {Component} from 'react';\r\n\r\n\r\nclass Stock extends Component {\r\n    render() {\r\n        console.log(Object.values(this.props.stock))\r\n        return (\r\n            <tr>\r\n\r\n\r\n                            <th scope=\"row\"> {this.props.stock.name} </th>\r\n                            <td>{this.twoDecimals(this.props.stock.unitValue)} {this.props.onCheckCurrency} </td>\r\n                            <td>{this.props.stock.quantity} </td>\r\n                            <td>{this.twoDecimals(this.props.stock.unitValue*this.props.stock.quantity)} {this.props.onCheckCurrency} </td>\r\n                            <td>\r\n                                <button\r\n                                    onClick={() => this.props.onDelete(this.props.stock.id)}\r\n                                    className=\"btn-danger btn btn-sm\"\r\n                                >\r\n                                    Delete\r\n                                </button>\r\n                            </td>\r\n\r\n\r\n\r\n            </tr>\r\n        );\r\n    }\r\n    twoDecimals (num){\r\n        return Math.floor(num * 100) / 100;\r\n    }\r\n}\r\n\r\nexport default Stock;\r\n","import React, {Component} from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { MDBContainer } from \"mdbreact\";\r\nimport Select from 'react-select';\r\n\r\n\r\n// As I've starting to reach the limit of sending the project in I'm goin to leave the graph like this.\r\n\r\nclass MakeGraph extends Component {\r\n    state = {\r\n            labels: [],\r\n            datasets: [\r\n            ]\r\n    }\r\n\r\n// I had HUGE problems in getting the data to my form. Having the data from the stocks loaded when the popup shows\r\n// was difficult. Ended up going with a button which loads the data in.\r\n    //Im using a react-chartjs-2 to make the graph here.\r\n    makeDatasets=() => {\r\n        const datasets = [...this.state.datasets];\r\n        var data= [];\r\n        for (let i=0; i<this.props.stocks.length; i++){\r\n            for (let k=0; k<Object.keys(this.props.stocks[i].history).length; k++){\r\n                data.push(this.props.stocks[i].history[Object.keys(this.props.stocks[i].history)[k]][\"1. open\"])\r\n            }\r\n            const newdatasets = {\r\n                label: this.props.stocks[i].name,\r\n                fill: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: \"rgba(75,192,192,1)\",\r\n                borderColor: \"rgba(\"+30*i+\",192,192,1)\",\r\n                borderCapStyle: \"butt\",\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: \"miter\",\r\n                pointBorderColor: \"#ff9784\",\r\n                pointBackgroundColor: \"#fff\",\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\r\n                pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: data\r\n            };\r\n            data=[];\r\n            datasets.push(newdatasets);\r\n            this.setState({ datasets});\r\n        }\r\n        //When the data is added I make the days show up at the bottom.\r\n        this.makeLabels();\r\n    };\r\n\r\n\r\n    makeLabels=()=>{\r\n        let newlabels = Object.keys(this.props.stocks[0].history);\r\n        this.setState({ labels: newlabels});\r\n    };\r\n\r\n    // Problems in using lists, arrays and objects... Ended up with leaving it.\r\n    getDates=()=>{\r\n        let dates= []\r\n        if ((this.props.stocks[0]) !== undefined){\r\n        for (let k=0; k<Object.keys(this.props.stocks[0].history).length; k++){\r\n            dates.push({label:Object.keys(this.props.stocks[0].history[0]),\r\n                value: k})\r\n        }\r\n        return dates\r\n        }\r\n        else {\r\n            this.hideIfEmpty()\r\n        }\r\n    };\r\n\r\n    hideIfEmpty(){\r\n        let value = this.props.stocks.length;\r\n        return value >0 ? false : true;\r\n    }\r\n    //The button triggers the sending of data and painting the graph.\r\n    render() {\r\n        return (\r\n            <MDBContainer>\r\n                <h3 className=\"mt-5\">Line chart</h3>\r\n                <button onClick={()=>this.makeDatasets()} className=\"btn btn-primary\" hidden={this.hideIfEmpty()}> Show the Graph! </button>\r\n                <Line data={this.state} options={{ responsive: true }} />\r\n            </MDBContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MakeGraph;\r\n","import React, {Component} from 'react';\r\n\r\nclass AddStock extends Component {\r\n\r\n    //Didnt want to add State here but didn't get it to work otherwise\r\n    state = {\r\n        unitValue: '',\r\n        history:[]\r\n    };\r\n\r\n    //Disabling the button in this view as well. The button on the Add stock pop up AND the one in the\r\n    // portfolio are disabled when the limit is reached\r\n    checkAmountUniqueStocks(){\r\n        let value = this.props.AmountUniqueStocks;\r\n        return value >=this.props.maxAmountUniqueStocks ? true : false;\r\n    }\r\n\r\n    //API call for stock values. I went with days instead of weeks or months.\r\n    getValue =()=>{\r\n        let typing= [this.refs.stockCode.value];\r\n        if (typing !== \"\"){\r\n            let Httpreq = new XMLHttpRequest();\r\n            Httpreq.open(\"GET\",\"http://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\"+typing+\"&apikey=HLLSC0ZZV82CRHHB\",false);\r\n            Httpreq.send(null);\r\n            let json_obj = JSON.parse(Httpreq.responseText);\r\n            if (json_obj['Time Series (Daily)']!== undefined){\r\n                const value = json_obj['Time Series (Daily)'][Object.keys(json_obj['Time Series (Daily)'])[0]]['1. open'];\r\n                const history = json_obj['Time Series (Daily)'];\r\n                //Saves the history for the graph and the values for the stock table.\r\n                this.setState({\r\n                    history: history,\r\n                    unitValue: value\r\n                });\r\n            }\r\n            else{\r\n                alert(json_obj['Note'])\r\n            }\r\n        }\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        //Saves up the info.\r\n        var stock = {\r\n            stockCode: this.refs.stockCode.value,\r\n            quantity: this.refs.quantity.value,\r\n            unitValue: this.refs.unitValue.value,\r\n            history: this.state.history\r\n        };\r\n        //Check if stock value is got\r\n        if (stock.unitValue !== \"\") {\r\n            //Check if empty\r\n            if(typeof stock.stockCode === 'string' && stock.stockCode.length > 0) {\r\n                if( stock.quantity.length > 0){\r\n                    this.props.onAddStock(stock)\r\n                    alert(\"Added \"+stock.quantity+\" \"+ stock.stockCode+\" stocks to your portfolio!\");\r\n                    this.setState({\r\n                        unitValue: ''\r\n                    });\r\n                    this.refs.addStockForm.reset();\r\n                }\r\n                else{\r\n                    alert(stock.quantity+\" Not a valid Amount!\")\r\n                }\r\n            }\r\n            else{\r\n                alert(stock.stockCode+\" is not a valid Code!\")\r\n            }\r\n\r\n        }\r\n        else{\r\n            this.getValue()\r\n            alert(\"This is the current value. Add to Portfolio?\")\r\n        }\r\n    };\r\n\r\n    // We got a check Value button to check if the stock code is true and to get it's value from the API.\r\n    // The submit button informs you if you are missing something.\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <form ref=\"addStockForm\"onSubmit={this.handleSubmit}>\r\n                    <div className=\"form-group row\">\r\n                        <label className=\"col-sm-2 col-form-label\">Stock Code</label>\r\n                        <div className=\"col-sm-10 input-group\" >\r\n\r\n                            <input  type=\"text\" ref=\"stockCode\" className=\"form-control\" id=\"CodeInput\" placeholder=\"Stock Code...\" />\r\n                            <span className=\"input-group-btn\">\r\n                            <button onClick={this.getValue.bind(this.refs.stockCode, 'value')} type=\"button\" className=\"btn btn-sm btn-secondary m-1\"> Check Value </button>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group row\">\r\n                        <label className=\"col-sm-2 col-form-label\">Unit Value</label>\r\n                        <div className=\"col-sm-10\">\r\n                            <input type=\"text\" ref=\"unitValue\" className=\"form-control\" id=\"UnitValueInput\"  value={this.state.unitValue} placeholder=\"Value...\" readOnly/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group row\">\r\n                        <label className=\"col-sm-2 col-form-label\">Quantity</label>\r\n                        <div className=\"col-sm-10\">\r\n                            <input type=\"number\" ref=\"quantity\" className=\"form-control\" id=\"QuantityInput\" placeholder=\"Quantity...\"  />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group row\">\r\n                        <div className=\"col-sm-10\">\r\n                            <button type=\"submit\"   className=\"btn btn-sm m-2 btn-primary\" disabled={this.checkAmountUniqueStocks()}>Submit </button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddStock;\r\n","import React, {Component} from 'react';\r\nimport Popup from \"reactjs-popup\";\r\nimport Stock from \"./stocks\";\r\nimport MakeGraph from \"./makegraph\"\r\nimport AddStock from \"./addstock\"\r\n\r\n//Pretty much the second \"Big Hub\" after App.\r\nclass Portfolio extends Component {\r\n    //state contains stocks and max stock amount\r\n    state = {\r\n        stocks: [],\r\n        maxAmountUniqueStocks: 50,\r\n    };\r\n\r\n    //New Stocks are made here. Similiar to how portfolios are made.\r\n    handleStock= stockData =>{\r\n        const stocks = [...this.state.stocks];\r\n        var timestamp = (new Date()).getTime();\r\n        const newStock = {\r\n            id:'stock-' + timestamp,\r\n            name: stockData.stockCode,\r\n            unitValue:stockData.unitValue,\r\n            quantity:stockData.quantity,\r\n            currency: \"USD\",\r\n            history: stockData.history\r\n        };\r\n        stocks.push(newStock);\r\n        this.setState({ stocks })\r\n    };\r\n\r\n    //Counts the totalvalue that's under the table\r\n    totalValue= () =>{\r\n        const stocks = [...this.state.stocks];\r\n        let tot = 0;\r\n        for (let i=0; i<this.state.stocks.length; i++){\r\n            tot += (stocks[i].unitValue*stocks[i].quantity);\r\n        }\r\n        // Adds the correct currency symbol\r\n        let cur = this.checkCurrency();\r\n        return (Math.floor(tot * 100) / 100+\" \"+ cur)} ;\r\n\r\n        //For EUR € and for USD $\r\n    checkCurrency= () =>{\r\n        const stocks = [...this.state.stocks];\r\n        if (stocks[0] !== undefined){\r\n            if (stocks[0].currency === \"USD\") return \"$\";\r\n            if (stocks[0].currency === \"EUR\") return \"€\";\r\n        }\r\n        else return \"\";\r\n\r\n    };\r\n        //Checks the amount of \"different\" stocks in the portfolio. Disables new stocks if limit is met.\r\n        checkAmountUniqueStocks(){\r\n        const stocks = [...this.state.stocks];\r\n        let value = stocks.length;\r\n        return value >=this.state.maxAmountUniqueStocks ? true : false;\r\n    }\r\n        //Handles the stock delete\r\n    handleStockDelete= (stockID) =>{\r\n        const stocks = this.state.stocks.filter(c => c.id !== stockID);\r\n        this.setState({ stocks})\r\n    };\r\n\r\n        //Change to Dollar/Euro changes the currency state to the other one.\r\n    changeToEuro= () =>{\r\n        const stocks = [...this.state.stocks];\r\n        if (stocks[0] !== undefined){\r\n            if (stocks[[0]].currency === \"USD\"){\r\n                let rate = this.checkRate(\"EUR\");\r\n                for (let i=0; i<stocks.length; i++){\r\n                    stocks[i].currency = \"EUR\";\r\n                    stocks[i].unitValue = stocks[i].unitValue*rate;\r\n                    stocks[i].unitValue = Math.floor(stocks[i].unitValue * 10000) / 10000\r\n                }\r\n            }\r\n            this.setState({\r\n                stocks\r\n            });\r\n        }\r\n    };\r\n    changeToDollar= () =>{\r\n        const stocks = [...this.state.stocks];\r\n        if (stocks[0] !== undefined){\r\n            if (stocks[[0]].currency === \"EUR\"){\r\n                let rate = this.checkRate(\"USD\");\r\n                if (rate !== 1){\r\n                    for (let i=0; i<stocks.length; i++){\r\n                        stocks[i].currency = \"USD\";\r\n                        stocks[i].unitValue = stocks[i].unitValue*rate;\r\n                        stocks[i].unitValue = Math.floor(stocks[i].unitValue * 10000) / 10000\r\n                    }\r\n                    this.setState({\r\n                        stocks\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // API Call for checking rates\r\n    checkRate(cur){\r\n        var Httpreq = new XMLHttpRequest();\r\n        if (cur === \"EUR\"){\r\n            Httpreq.open(\"GET\",\"https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=USD&to_currency=EUR&apikey=HLLSC0ZZV82CRHHB\",false);\r\n        }\r\n        if (cur === \"USD\"){\r\n            Httpreq.open(\"GET\",\"https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=EUR&to_currency=USD&apikey=HLLSC0ZZV82CRHHB\",false);\r\n        }\r\n        Httpreq.send(null);\r\n        var json_obj = JSON.parse(Httpreq.responseText);\r\n        if (json_obj['Realtime Currency Exchange Rate']!== undefined) {\r\n            const value = json_obj['Realtime Currency Exchange Rate']['5. Exchange Rate']\r\n            console.log(\"this is the Exchange Rate: \" + JSON.stringify(value))\r\n            return value;\r\n        }\r\n        else {\r\n            alert(json_obj['Note'])\r\n            return 1;\r\n        }\r\n\r\n    }\r\n    /// A Table with the Stocks. Followed by two popup buttons for Adding Stocks and looking at the graph.\r\n    /// The Exchange buttons are at the end.\r\n    render() {\r\n        return (\r\n            <div>\r\n                <span className=\"float-left badge badge-pill badge-secondary m-2\" >{this.state.stocks.length} </span>\r\n                <div>\r\n                    <table className=\"table table-hover table-responsive-sm table-bordered\">\r\n                        <thead className=\"thead-light\">\r\n                            <tr className=\"\">\r\n                                <th scope=\"col\">Name</th>\r\n                                <th scope=\"col\">Unit Value</th>\r\n                                <th scope=\"col\">Quantity</th>\r\n                                <th scope=\"col\">Total Value</th>\r\n                                <th scope=\"col\">Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n\r\n                            {this.state.stocks.map(stock => (\r\n                                <Stock\r\n                                    key = {stock.name}\r\n                                    stock={stock}\r\n                                    onCheckCurrency={this.checkCurrency()}\r\n                                    state={true}\r\n                                    onDelete={this.handleStockDelete}\r\n                                />\r\n                            ))}\r\n\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div>\r\n                    <p>Total value of portfolio: {this.totalValue()}</p>\r\n                </div>\r\n                <div className=\"navbar\">\r\n                    <Popup trigger={<button className=\"btn btn-sm btn-primary\" disabled={this.checkAmountUniqueStocks()}> Add Stock</button>} modal>\r\n                        {close => (\r\n                            <div>\r\n                                <div className=\"nav-item\">\r\n                                    <button  className=\"close m-3\" onClick={close}>X</button>\r\n                                </div>\r\n                                <div className=\"navbar-brand text-right\">\r\n                                <h1> Add stocks</h1>\r\n                                </div>\r\n\r\n                            <div className=\"text-body \">\r\n                                <AddStock\r\n                                    onAddStock = {this.handleStock}\r\n                                    AmountUniqueStocks = {this.state.stocks.length}\r\n                                    maxAmountUniqueStocks = {this.state.maxAmountUniqueStocks}\r\n                                />\r\n                            </div>\r\n                            </div>\r\n                        )}\r\n                    </Popup>\r\n                    <Popup trigger={<button className=\"btn btn-sm btn-primary\"> Check Graph</button>} modal>\r\n                        {close => (\r\n                            <div>\r\n                                <div className=\"nav-item\">\r\n                                    <button  className=\"close m-3\" onClick={close}>X</button>\r\n                                </div>\r\n                                <div className=\"navbar-brand text-right\">\r\n                                    <h1> Portfolio Timeline</h1>\r\n                                </div>\r\n\r\n                                <div className=\"modal-body align-content-center\" >\r\n                                    <MakeGraph\r\n                                    stocks={this.state.stocks}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </Popup>\r\n\r\n                    <div>\r\n                        <button onClick={() =>this.changeToEuro()} className=\"btn btn-secondary m-2\">€</button>\r\n                        <button onClick={() =>this.changeToDollar()} className=\"btn btn-secondary m-2\">$</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Portfolio;\r\n","import React, {Component} from 'react';\r\nimport Portfolio from \"./portfolio\";\r\n\r\n// Show the name for the portfolio and gives the portfolio a close button.\r\nclass PortfolioList extends Component {\r\n    render=()=>{\r\n        return (\r\n            <div className=\"container\">\r\n                <ul className=\"text-center\">\r\n                    {\r\n                        Object.keys(this.props.portfolios).map(function(portfolio) {\r\n                            return (\r\n                                <div>\r\n                                    <li className=\"list-group-item m-2\">\r\n                                        <div className=\"navbar navbar-light\">\r\n                                            <h1>{this.props.portfolios[portfolio][0].key}</h1>\r\n                                            <button onClick= {() => this.onRemovePortfolio(this.props.portfolios[portfolio][0].props.id)} className=\"close\"> X</button>\r\n                                        </div>\r\n                                        <Portfolio/>\r\n                                    </li>\r\n                                </div>)\r\n                        }.bind(this))\r\n                    }\r\n                </ul>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    //The remove portfolio button in /App\r\n    onRemovePortfolio(id){\r\n        return this.props.onRemovePortfolio(id)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default PortfolioList;\r\n","import React, { Component } from 'react';\nimport NavBar from \"./components/navbar\";\nimport PortfolioList from './components/portfoliolist'\nimport './App.css';\nimport Portfolio from \"./components/portfolio\";\n\n// This was a pretty difficult task as React wasn't familiar from before. Lots of time went to getting simple things done.\n\nclass App extends Component {\n    //State to save portfolios and to easily change limits\n    state = {\n        portfolios:[],\n        maxPortfoliosAmount: 10,\n    };\n\n    //Handle new portfolios. Started at addportfolio when Add Portfolio button is pressed.\n    handleNewPortfolio = (portfolio) => {\n        let timestamp = (new Date()).getTime();\n        let newPortfolio = [<Portfolio\n            id= {'portfolio-'+portfolio + timestamp}\n            key={portfolio}\n        />];\n        this.setState(prevState =>({ portfolios: [...prevState.portfolios, newPortfolio]}))\n    };\n    //Handle removing of portfolios. Started at portfoliolist by pressing the X.\n    handleRemovePortfolio = (id) => {\n        for (let i=0; i<this.state.portfolios.length; i++){\n            let portfolioId = this.state.portfolios[i][0].props.id;\n            if (portfolioId === id) {\n                this.state.portfolios.splice(i,1)\n            }\n            this.setState( this.state )\n        }\n    };\n\n    render() {\n    return (\n        <React.Fragment>\n            <NavBar\n                //new portfolios come from here\n                onNewPortfolio={this.handleNewPortfolio}\n                //to show a nice counter of the amount of portfolios\n                portfoliosAmount={this.state.portfolios.length}\n                //limit on the portfolios to disable the button\n                maxPortfoliosAmount={this.state.maxPortfoliosAmount}\n            />\n            <main className=\"container\">\n                <div className=\"component-wrapper\">\n                    <PortfolioList\n                        //list of Portfolios, has access to the deleting of portfolios and App gives portfolios onward\n                        portfolios={this.state.portfolios}\n                        onRemovePortfolio={this.handleRemovePortfolio}\n                    />\n\n                </div>\n            </main>\n        </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import Card from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\n\n\n\n//const element = <h1> Hello World </h1>\n//ReactDOM.render(element, document.getElementById('root'));\nReactDOM.render(<App />, document.getElementById('root'));\n//ReactDOM.render(<Counters />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}